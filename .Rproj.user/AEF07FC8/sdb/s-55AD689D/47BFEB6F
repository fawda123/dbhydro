{
    "contents" : "#'@name cleanwq\n#'@title Clean raw water quality DBHYDRO data retrievals\n#'@description Remove extra columns associated with QA flags, LIMS, and District recieving. Remove QA \"blanks\". Convert results from long to wide format.\n#'@details Current DBHYDRO practice is to return values below the MDL as 0 minus the uncertainty estimate.\n#'@export\n#'@import reshape2\n#'@param dt data.frame output of getwq\n#'@param mdl_handling character specify values to return for measurements below the minimum detection limit choice of \"raw\", \"half\", or \"full\".\n#'@examples \\dontrun{\n#'#check handling of values below MDL\n#' dt <- getwq(\"FLAB01\", \"2014-09-14\", \"2014-09-18\", \"NITRATE+NITRITE-N\", raw = TRUE)\n#' cleanwq(dt, mdl_handling = \"raw\")\n#' cleanwq(dt, mdl_handling = \"half\")\n#'}\n#'\n#'dt <- read.csv(system.file(\"extdata\", \"testwq.csv\", package = \"dbhydroR\"))\n#'cleanwq(dt)\n\ncleanwq <- function(dt, mdl_handling = \"raw\"){\n  if(!(mdl_handling %in% c(\"raw\", \"half\", \"full\"))){\n    stop(\"mdl_handling must be one of 'raw', 'half', or 'full'\")\n  }\n\n  dt <- dt[,1:23]\n  dt <- dt[dt$Matrix != \"DI\",]\n  \n  dt$date <- as.POSIXct(strptime(dt$Collection_Date, format = \"%d-%b-%Y\")) \n  \n  correct_mdl <- function(dt, mdl_handling){\n    if(any(dt$Value < 0 & !is.na(dt$Value)) & mdl_handling != \"raw\"){\n      if(mdl_handling == \"half\"){\n        dt[dt$Value < 0 & !is.na(dt$Value), \"Value\"] <- \n          dt[dt$Value < 0 & !is.na(dt$Value), \"MDL\"] / 2\n      }else{\n        dt[dt$Value < 0 & !is.na(dt$Value), \"Value\"] <- \n          dt[dt$Value < 0 & !is.na(dt$Value), \"MDL\"]\n      }\n    }\n    dt\n  }\n  \n  dt <- correct_mdl(dt, mdl_handling)\n\n  dwide <- reshape2::dcast(dt, date ~ Station.ID + Test.Name + Units,\n           value.var = \"Value\", add.missing = TRUE, fun.aggregate = mean)\n  #if(any(names(dwide)==\"_\")){dwide<-dwide[,-which(names(dwide)==\"_\")]}\n  # if(ncol(dwide) > 2){\n  #   dwide <- dwide[,-2]\n  # }\n  if(nrow(dwide[is.na(dwide[,1]),]) > 0){\n    dwide <- dwide[-which(is.na(dwide[,1])),]\n  }\n  \n  dwide\n}\n\n#'@name cleanhydro\n#'@title Clean raw hydrologic DBHYDRO data retrievals\n#'@description Cleans output of gethydro query to be consistent with water quality formatting. Connects metadata header to actual measurements.\n#'@export\n#'@import reshape2\n#'@importFrom utils read.csv\n#'@param res output of \\code{\\link[dbhydroR]{gethydro}}\n#'@examples\n#'\\dontrun{\n#'cleanhydro(gethydro(dbkey = \"15081\", date_min = \"2013-01-01\", date_max = \"2013-02-02\"))\n#'}\n\ncleanhydro <- function(res){\n  \n  i <- 1\n  while(any(!is.na(suppressMessages(read.csv(text = httr::content(res,\n    \"text\"), skip = i, stringsAsFactors = FALSE, header = FALSE))[i, 10:16]))){\n    i <- i + 1\n  }\n  \n  metadata <- suppressMessages(read.csv(text = httr::content(res, \"text\"),\n              skip = 1, stringsAsFactors = FALSE))[1:(i - 1),]\n  \n  try({dt <- suppressMessages(read.csv(text = httr::content(res, \"text\"),\n             skip = i + 1, stringsAsFactors = FALSE))}, silent = TRUE)\n  if(class(dt) != \"data.frame\"){\n    stop(\"No data found\")\n  }\n  \n   if(!any(names(dt) == \"DBKEY\")){\n     warning(\"Column headings missing. Guessing...\")\n    \n     names(dt) <- c(\"Station\", \"DBKEY\", \"Daily.Date\", \"Data.Value\",\n                  \"Qualifer\", \"Revision.Date\")\n     \n     if(all(is.na(as.POSIXct(strptime(dt$Daily.Date, format = \"%d-%b-%Y\"))))){\n       warning(\"Instantaneous data detected\")\n       \n       names(dt) <- c(\"Inst.Date\", \"DCVP\", \"DBKEY\", \"Data.Value\",\n                    \"Code\", \"Quality.Flag\")\n       dt <- merge(metadata, dt)\n       dt$date <- as.POSIXct(strptime(dt$Inst.Date, format = \"%d-%b-%Y %H:%M\"))\n      }\n  }else{\n    dt <- merge(metadata, dt)\n    dt$date <- as.POSIXct(strptime(dt$Daily.Date, format = \"%d-%b-%Y\"))\n  }\n  \n  names(dt) <- tolower(names(dt))\n  reshape2::dcast(dt, date ~ station + type + units, value.var = \"data.value\",\n    add.missing = TRUE, fun.aggregate = mean)\n  \n}\n",
    "created" : 1471019613420.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2442427898",
    "id" : "47BFEB6F",
    "lastKnownWriteTime" : 1471030791,
    "path" : "M:/docs/dbhydro/R/dbhydro_clean.R",
    "project_path" : "R/dbhydro_clean.R",
    "properties" : {
    },
    "relative_order" : 6,
    "source_on_save" : false,
    "type" : "r_source"
}