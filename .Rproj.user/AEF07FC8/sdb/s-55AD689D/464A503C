{
    "contents" : "#'@name getwq\n#'@title Retrieve water quality data from the DBHYDRO Environmental Database\n#'@description Retrieve water quality data from the DBHYDRO Environmental Database\n#'@param station_id character string of station id(s)\n#'@param date_min character date must be in POSIXct YYYY-MM-DD format\n#'@param date_max character date must be in POSIXct YYYY-MM-DD format\n#'@param test_name character string of test name(s). See vignette for specific options\n#'@param raw logical default is FALSE, set to TRUE to return data in \"long\" format with all comments, qa information, and database codes included. \n#'@param qc_strip logical set TRUE to avoid returning QAQC flagged data entries\n#'@param qc_field logical set TRUE to avoid returning field QC results\n#'@param test_number numeric test name alternative (not implemented)\n#'@param v_target_code string print to file? (not implemented)\n#'@param sample_id numeric (not implemented)\n#'@param project_code numeric (not implemented)\n#'@param mdl_handling character specify values to return for measurements below the minimum detection limit choice of \"raw\", \"half\", or \"full\".\n#'@export\n#'@import httr\n#'@import RCurl\n#'@importFrom utils read.csv\n#'@examples\n#'\n#'#one variable and one station\n#'getwq(station_id = \"FLAB08\",\n#'date_min = \"2011-03-01\", date_max = \"2012-05-01\", \n#'test_name = \"CHLOROPHYLLA-SALINE\")\n#'\n#'\\dontrun{\n#'#one variable at multiple stations\n#'getwq(station_id = c(\"FLAB08\", \"FLAB09\"),\n#'date_min = \"2011-03-01\", date_max = \"2012-05-01\",\n#'test_name = \"CHLOROPHYLLA-SALINE\")\n#'\n#'#One variable at a wildcard station\n#'getwq(station_id = c(\"FLAB0%\"),\n#'date_min = \"2011-03-01\",\n#'date_max = \"2012-05-01\",\n#'test_name = \"CHLOROPHYLLA-SALINE\")\n#'\n#'#multiple variables at multiple stations\n#'getwq(station_id = c(\"FLAB08\", \"FLAB09\"),\n#'date_min = \"2011-03-01\", date_max = \"2012-05-01\",\n#'test_name = c(\"CHLOROPHYLLA-SALINE\", \"SALINITY\"))\n#'}\n\n\ngetwq <- function(station_id = NA, date_min = NA, date_max = NA,\n         test_name = NA, mdl_handling = \"raw\", raw = FALSE, qc_strip = \"N\",\n         qc_field = \"N\", test_number = NA, v_target_code = \"file_csv\",\n         sample_id = NA, project_code = NA){\n  \n  if(!(nchar(date_min) == 10 & nchar(date_max) == 10)){\n    stop(\"Enter dates as quote-wrapped character strings in YYYY-MM-DD format\")\n  }\n  \n  servfull <- \"http://my.sfwmd.gov/dbhydroplsql/water_quality_data.report_full\"\n  \n  #try(ping<-RCurl::getURL(\n  # \"http://www.sfwmd.gov/portal/page/portal/sfwmdmain/home%20page\"),\n  # silent=TRUE)\n  #if(!exists(\"ping\")){stop(\"no internet connection\")}\n  \n  station_like <- station_id[grepl(\"%\", station_id)]\n  if(length(station_like) > 0){\n    station_id <- station_id[!grepl(\"%\", station_id)]\n    station_like <- paste(\"(\", paste(\"'\", station_like, \"'\", sep = \"\",\n                    collapse = \",\"), \")\", sep = \"\")\n  }else{\n    station_like <- NA\n  }\n  \n  station_list <- paste(\"(\",paste(\"'\", station_id, \"'\", sep = \"\",\n                  collapse = \",\"), \")\", sep = \"\")\n  \n  if(!is.na(date_min)){\n    date_min <- strftime(date_min, format = \"%d-%b-%Y\")\n    date_min <- paste(\"> \", \"'\", date_min, \"'\", sep = \"\")\n  }\n  if(!is.na(date_max)){\n    date_max <- strftime(date_max, format = \"%d-%b-%Y\")\n    date_max <- paste(\"< \", \"'\", date_max, \"'\", sep = \"\")\n  }\n  \n  test_list <- paste(\"(\", paste(\"'\", test_name, \"'\", sep = \"\",\n               collapse = \",\"), \")\", sep = \"\")\n  \n  if(qc_strip == TRUE){\n    qc_strip <- \"Y\"\n  }\n  \n  if(qc_field == TRUE){\n    qc_field <- \"Y\"\n  }\n  \n  if(length(station_like) > 0 & any(!is.na(station_like))){\n    qy <- list(v_where_clause = paste(\"where\", \"date_collected\", date_min,\n          \"and\", \"date_collected\", date_max, \"and\", \"station_id\", \"like\",\n          station_like, \"and\", \"test_name\", \"in\", test_list, sep = \" \"),\n          v_target_code = v_target_code, v_exc_flagged = qc_strip,\n          v_exc_qc = qc_field)\n  }else{\n    qy <- list(v_where_clause = paste(\"where\", \"date_collected\", date_min,\n          \"and\", \"date_collected\", date_max, \"and\", \"station_id\", \"in\",\n          station_list, \"and\", \"test_name\", \"in\", test_list, sep = \" \"),\n          v_target_code = v_target_code, v_exc_flagged = qc_strip,\n          v_exc_qc = qc_field)\n  }\n  \n  res <- httr::GET(servfull, query = qy)\n  res <- suppressMessages(read.csv(text = httr::content(res, \"text\"),\n         stringsAsFactors = FALSE, na.strings = c(\" \", \"\")))\n  res <- res[rowSums(is.na(res)) != ncol(res),]\n  \n  if(raw == TRUE){\n    res\n  }else{\n    if(!any(!is.na(res)) | !any(res$Matrix != \"DI\")){\n      message(\"No data found\")\n    }else{\n      cleanwq(res, mdl_handling = mdl_handling)\n    }\n  }\n}\n\n\n#'@name gethydro\n#'@title Retrieve DBHYDO hydrologic data\n#'@description Retrieve hydrologic data from the DBHYDRO Environmental Database\n#'@param dbkey character string dataset identifier. See \\code{\\link[dbhydroR]{getdbkey}}\n#'@param date_min character date must be in YYYY-MM-DD format\n#'@param date_max character date must be in YYYY-MM-DD format\n#'@param ... Options passed on to \\code{\\link[dbhydroR]{getdbkey}}\n#'@export\n#'@import httr\n#'@import RCurl\n#'@examples\n#'\\dontrun{\n#'#One variable/station time series\n#'gethydro(dbkey = \"15081\", date_min = \"2013-01-01\", date_max = \"2013-02-02\")\n#'\n#'#Multiple variable/station time series\n#'gethydro(dbkey = c(\"15081\", \"15069\"),\n#'date_min = \"2013-01-01\", date_max = \"2013-02-02\")\n#'\n#'#Instantaneous hydro retrieval\n#'gethydro(dbkey = \"IY639\", date_min = \"2009-01-30\", date_max = \"2015-11-04\")\n#'\n#'#Looking up unknown dbkeys on the fly\n#'gethydro(stationid = \"JBTS\", category = \"WEATHER\", \n#'param = \"WNDS\", date_min = \"2013-01-01\", \n#'date_max = \"2013-02-02\")\n#'}\n\ngethydro <- function(dbkey = NA, date_min = NA, date_max = NA, ...){\n  \n  period <- \"uspec\"\n  v_target_code <- \"file_csv\"\n  \n  if(!(nchar(date_min) == 10 & nchar(date_max) == 10)){\n    stop(\"Enter dates as quote-wrapped character strings in YYYY-MM-DD format\")\n  }\n\n  # if((is.na(stationid) | is.na(category)) & all(is.na(dbkey))){\n  #   stop(\"Must specify either a dbkey or stationid/category/param.\")\n  # }\n  \n  if(all(is.na(dbkey))){\n    dbkey <- getdbkey(detail.level = \"dbkey\", ...)\n  }\n  \n  if(length(dbkey) > 1){\n    dbkey <- paste(dbkey, \"/\", collapse = \"\", sep = \"\")\n    dbkey <- substring(dbkey, 1, (nchar(dbkey) - 1))\n  }\n  \n  servfull <- \"http://my.sfwmd.gov/dbhydroplsql/web_io.report_process\"\n  \n  if(!is.na(date_min)){\n    date_min <- strftime(date_min, format = \"%Y%m%d\")\n  }\n  if(!is.na(date_max)){\n    date_max <- strftime(date_max, format = \"%Y%m%d\")\n  }\n  \n  qy <- list(v_period = period, v_start_date = date_min, v_end_date = date_max,\n        v_report_type = \"format6\", v_target_code = v_target_code,\n        v_run_mode = \"onLine\", v_js_flag = \"Y\", v_dbkey = dbkey)\n  \n  res <- httr::GET(servfull, query = qy)\n  \n  try({res <- cleanhydro(res)}, silent = TRUE)\n  if(class(res) == \"response\"){\n    stop(\"No data found\")\n  }\n  \n  res\n}\n\n#'@name getdbkey\n#'@title Query dbkey information\n#'@description Retrieve a data.frame summary including dbkeys or a vector of dbkeys corresponding to specified parameters\n#'@export\n#'@param category character string, choice of \"WEATHER\", \"SW\", \"GW\", or \"WQ\"\n#'@param stationid character string specifying station name\n#'@param param character string specifying desired parameter name\n#'@param freq character string specifying collection frequency (daily = \"DA\")\n#'@param stat character string specifying statistic type\n#'@param recorder character string specifying recorder information\n#'@param agency character string specifying collector agency\n#'@param strata numeric vector of length 2 specifying a range of z-coordinates relative to local ground elevation. Only applicable for queries in the \"WEATHER\" and \"GW\" categories.\n#'@param detail.level character string specifying the level of detail to return. Choices are \"full\", \"summary\", and \"dbkey\".\n#'@param ... Options passed as named parameters\n#'@details A value in the \"Recorder\" field of \"PREF\" should be used whenever possible. This indicates that the dataset has been checked by the SFWMD modelling group.\n#'@import XML\n#'@importFrom stats setNames\n#'@references \\url{http://my.sfwmd.gov/dbhydroplsql/show_dbkey_info.main_menu}\n#'@references \\url{http://my.sfwmd.gov/dbhydroplsql/show_dbkey_info.show_meta_data}\n#'@examples \\dontrun{\n#'# Weather\n#'getdbkey(stationid = \"JBTS\", category = \"WEATHER\", param = \"WNDS\", detail.level = \"summary\")\n#'getdbkey(stationid = \"JBTS\", category = \"WEATHER\", param = \"WNDS\", detail.level = \"dbkey\")\n#'\n#'# query on multiple values\n#'getdbkey(stationid = c(\"MBTS\", \"JBTS\"), category = \"WEATHER\",\n#' param = \"WNDS\", freq = \"DA\", detail.level = \"dbkey\")\n#'\n#'\n#'# Surfacewater\n#'getdbkey(stationid = \"C111%\", category = \"SW\")\n#'\n#'# Groundwater\n#'getdbkey(stationid = \"C111%\", category = \"GW\")\n#'getdbkey(stationid = \"C111AE\", category = \"GW\", param = \"WELL\",\n#' freq = \"DA\", stat = \"MEAN\", strata = c(9, 22), recorder = \"TROL\",\n#'  agency = \"WMD\", detail.level = \"full\")\n#'\n#'# Water Quality\n#'getdbkey(stationid = \"C111%\", category = \"WQ\")\n#'}\n\ngetdbkey <- function(category, stationid = NA, param = NA, freq = NA,\n            stat = NA, recorder = NA, agency = NA, strata = NA,\n            detail.level = \"summary\", ...){\n\n  if(!(detail.level %in% c(\"full\", \"summary\", \"dbkey\"))){\n    stop(\"Must specify either 'full', 'summary',\n      or 'dbkey' for the detail.level argument \")\n  }\n\n  if(any(!is.na(strata))){\n    strata_from <- strata[1]\n    strata_to <- strata[2]\n  }else{\n    strata_from <- NA\n    strata_to <- NA\n  }\n  \n  # expand parameters with length > 1 to be seperated by \"/\" \n  # with no trailing \"/\" ####\n  user_args <- list(v_category = category, v_station = stationid,\n               v_data_type = param, v_frequency = freq, v_statistic_type = stat,\n               v_recorder = recorder, v_agency = agency,\n               v_strata_from = strata_from, v_strata_to = strata_to)\n  greater_length_args <- lapply(user_args, function(x) length(x))\n  if(length(which(greater_length_args > 1)) >  0){\n    collapse_args <- user_args[which(greater_length_args > 1)]\n    collapse_args <- paste0(do.call(\"c\", collapse_args), \"/\", collapse = \"\")\n    collapse_args <- substring(collapse_args, 1, (nchar(collapse_args) - 1))\n    user_args[which(greater_length_args > 1)] <- collapse_args\n  }\n  \n  dbhydro_args <- setNames(as.list(c(\"Y\", \"STATION\", \"Y\")), c(\"v_js_flag\",\n                  \"v_order_by\", \"v_dbkey_list_flag\"))\n  qy <- c(user_args, dbhydro_args)\n\n  if(any(is.na(qy))){\n    qy <- qy[-which(is.na(qy))]\n  }\n  \n  servfull <- \"http://my.sfwmd.gov/dbhydroplsql/show_dbkey_info.show_dbkeys_matched\"\n  res <- httr::GET(servfull, query = qy)\n  res <- sub('.*(<table class=\"grid\".*?>.*</table>).*', '\\\\1',\n         suppressMessages(httr::content(res, \"text\")))\n  \n  if(length(XML::readHTMLTable(res)) < 3){\n    stop(\"No dbkeys found\")  \n  }\n  \n  if(detail.level == \"full\"){\n    res <- XML::readHTMLTable(res)[[3]]\n  }else{\n    res <- XML::readHTMLTable(res)[[3]][,c(\"Dbkey\", \"Group\", \"Data Type\",\n           \"Freq\", \"Recorder\", \"Start Date\", \"End Date\")]\n  }\n  \n  if(nrow(res) > 1){\n    not_na_col <- !(apply(res, 2, function(x) all(is.na(x))))\n    if(any(not_na_col == FALSE)){\n      res <- res[,not_na_col]  \n    }\n  }else{\n    not_na_element <- which(is.na(res))\n    if(length(not_na_element) > 0){\n      res <- res[-not_na_element]  \n    }\n  }\n  res[,1] <- as.character(res[,1])\n  \n  if(detail.level %in% c(\"full\", \"summary\")){\n    message(paste(\"Search results for\", \" '\", stationid, \" \", category, \"'\",\n      sep = \"\"))\n    res\n  }else{\n    res[,1] \n  }\n  \n}\n",
    "created" : 1471019537788.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1575132687",
    "id" : "464A503C",
    "lastKnownWriteTime" : 1471029877,
    "path" : "M:/docs/dbhydro/R/dbhydro_get.R",
    "project_path" : "R/dbhydro_get.R",
    "properties" : {
    },
    "relative_order" : 5,
    "source_on_save" : false,
    "type" : "r_source"
}