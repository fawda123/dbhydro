devtools::install()
vignette(package = 'dbHydroR')
vignette(package = 'dbhydroR')
vignette('dbhydroR', package = 'dbhydroR')
install.packages('dbHydroR')
install.packages('dbhydroR')
sessionInfo()
library(dbhydroR)
install.packages('dbhydroR')
remove.packages('dbhydroR')
install.packages('dbhydroR')
install.packages('dbhydroR')
library(dbhydroR)
remove.packages('dbhydroR')
install.packages('dbhydroR')
sessionInfo()
library(dbhydroR)
sessionInfo()
remove.packages('dbhydroR')
devtools::install_github("SFWMD/dbhydro")
library(dbhydroR)
sessionInfo()
?getwq
vignette('dbhydroR', package = 'dbhydroR')
?cleanhydro
?getwq
getwq(station_id = "FLAB08", date_min = "2011-03-01",
date_max = "2012-05-01", test_name = "CHLOROPHYLLA-SALINE")
getwq(station_id = "2AN.25", date_min = "2011-03-01",
date_max = "2012-05-01", test_name = "CHLOROPHYLLA-SALINE")
getwq(station_id = "2AFS.25", date_min = "2011-03-01",
date_max = "2012-05-01", test_name = "CHLOROPHYLLA-SALINE")
getwq(station_id = "GRID 428", date_min = "2011-03-01",
date_max = "2012-05-01", test_name = "CHLOROPHYLLA-SALINE")
getwq(station_id = "G52SW", date_min = "2011-03-01",
date_max = "2012-05-01", test_name = "CHLOROPHYLLA-SALINE")
getwq(station_id = "FLAB24", date_min = "2011-03-01",
date_max = "2012-05-01", test_name = "CHLOROPHYLLA-SALINE")
getwq(station_id = "FLAB08", date_min = "2011-03-01",
date_max = "2012-05-01", test_name = "CHLOROPHYLLA-SALINE")
getwq(station_id = c("FLAB08","FLAB09"), date_min = "2011-03-01",
date_max = "2012-05-01", test_name = "CHLOROPHYLLA-SALINE")
getwq(station_id = c("FLAB08","FLAB09"), date_min = "2011-03-01",
date_max = "2012-05-01", test_name = "AMMONIA-N")
getwq(station_id = c("FLAB08","FLAB09"), date_min = "2011-03-01",
date_max = "2018-05-01", test_name = "AMMONIA-N")
getwq(station_id = c("FLAB08","FLAB09"), date_min = "1940-03-01",
date_max = "2018-05-01", test_name = "AMMONIA-N")
getwq(station_id = c("FLAB0%"), date_min = "2011-03-01",
date_max = "2012-05-01", test_name = "CHLOROPHYLLA-SALINE")
getwq(station_id = c("FLAB0%"), date_min = "2011-03-01",
date_max = "2012-05-01", test_name = "CHLOROPHYLLA-SALINE")
SWMPr::site_codes()
getwq(station_id = "FLAB08", date_min = "2011-03-01",
date_max = "2011-05-01", test_name = "CHLOROPHYLLA-SALINE",
raw = TRUE)
getdbkey(stationid = "JBTS", category = "WEATHER", param = "WNDS",
detail.level = "summary")
getdbkey(stationid = "JBTS", category = "WEATHER", param = "WNDS",
freq = "DA", detail.level = "full")
getdbkey(stationid = "JBTS", category = "WEATHER", param = "WNDS",
freq = "DA", stat = "MEAN", recorder = "CR10", agency = "WMD",
detail.level = "dbkey")
gethydro(dbkey = "15081",
date_min = "2013-01-01", date_max = "2013-02-02")
gethydro(date_min = "2013-01-01", date_max = "2013-02-02",
stationid = "JBTS", category = "WEATHER", param = "WNDS",
freq = "DA", stat = "MEAN", recorder = "CR10", agency = "WMD")
gethydro(dbkey = c("15081", "15069"), date_min = "2013-01-01",
date_max = "2013-02-02")
gethydro(dbkey = c('IX718', '15081'), date_min = "2013-01-01",
date_max = "2013-02-02")
gethydro(date_min = "2013-01-01", date_max = "2013-02-02",
category = "WEATHER", stationid = c("JBTS", "MBTS"),
param = "WNDS", freq = "DA", stat = "MEAN")
example(getdbkey)
example(gethydro)
devtools::check()
devtools::build_win()
devtools::build_win()
devtools::build_win()
devtools::check()
xparse
library(xparse)
install.packages('xparse')
install.packages('l3kernel')
devtools::build_win()
devtools::check()
devtools::check()
devtools::check()
?devtools::run_examples
devtools::run_examples(pkg = '.', run = F)
gethydro(dbkey = "15081", date_min = "2013-01-01", date_max = "2013-02-02")
cleanhydro(gethydro(dbkey = "15081", date_min = "2013-01-01", date_max = "2013-02-02"))
devtools::load_all(".")
cleanhydro(gethydro(dbkey = "15081", date_min = "2013-01-01", date_max = "2013-02-02"))
dt
metadata
reshape2::dcast(dt, date ~ station + type + units, value.var = "data.value",
add.missing = TRUE, fun.aggregate = mean)
cleanhydro(gethydro(dbkey = "15081", date_min = "2013-01-01", date_max = "2013-02-02"))
read.csv(text = httr::content(res,
"text"), skip = i, stringsAsFactors = FALSE, header = FALSE)
res
devtools::load_all(".")
cleanhydro(gethydro(dbkey = "15081", date_min = "2013-01-01", date_max = "2013-02-02"))
res
res
res
cleanhydro(gethydro(dbkey = "15081", date_min = "2013-01-01", date_max = "2013-02-02"))
res
gethydro(dbkey = "15081", date_min = "2013-01-01", date_max = "2013-02-02")
gethydro(dbkey = "15081", date_min = "2013-01-01", date_max = "2013-02-02")
devtools::load_all(".")
gethydro(dbkey = "15081", date_min = "2013-01-01", date_max = "2013-02-02")
qy
res
httr::content(res,
"text")
i
i <- 1
read.csv(text = httr::content(res,
"text"), skip = i, stringsAsFactors = FALSE, header = FALSE)
uppressMessages(read.csv(text = httr::content(res,
"text"), skip = i, stringsAsFactors = FALSE, header = FALSE))[i, 10:16]
suppressMessages(read.csv(text = httr::content(res,
"text"), skip = i, stringsAsFactors = FALSE, header = FALSE))[i, 10:16]
any(!is.na(suppressMessages(read.csv(text = httr::content(res,
"text"), skip = i, stringsAsFactors = FALSE, header = FALSE))[i, 10:16]))
i
read.csv(text = httr::content(res, "text"),
skip = i + 1, stringsAsFactors = FALSE))
read.csv(text = httr::content(res, "text"),
skip = i + 1, stringsAsFactors = FALSE)
res
cleanhydro(gethydro(dbkey = "15081", date_min = "2013-01-01", date_max = "2013-02-02"))
res
devtools::load_all(".")
cleanhydro(gethydro(dbkey = "15081", date_min = "2013-01-01", date_max = "2013-02-02"))
res
vignette('dbhydroR', package = 'dbhydroR')
devtools::install_github("SFWMD/dbhydro")
vignette("dbhydroR", package = "dbhydroR")
vignette("dbhydroR", package = "dbhydroR")
devtools::load_all(".")
?cleanwq
?cleanhydro
devtools::run_examples(pkg = '.', run = F)
devtools::load_all(".")
devtools::run_examples(pkg = '.', run = F)
?getq
?getwq
?Gethydro
vignette('dbhydroR', package = 'dbhydroR')
library(dbhydro)
library(dbhydroR)
vignette('dbhydroR', package = 'dbhydroR')
vignette("dbhydroR", package = "dbhydroR")`
vignette("dbhydroR", package = "dbhydroR")
vignette("dbhydroR", package = "dbhydroR")
?devtools::use_code_of_conduct
