\documentclass[12pt,notitlepage]{article}

%\usepackage{listings}
\usepackage[utf8]{inputenc}%jsta
\usepackage[english]{babel}%test
\usepackage{float}

\usepackage{natbib}
\usepackage[obeyspaces,spaces]{url}
\bibliographystyle{plainnat}
\bibpunct[; ]{(}{)}{,}{a}{}{;}

\usepackage{pifont,mdframed}%test

\usepackage{geometry}
\geometry{left=1.25in,right=1.25in,top=1.25in,bottom=1.25in}
\usepackage{rotating}
\usepackage{fancyhdr}
\usepackage[bookmarks,colorlinks,breaklinks,citecolor=red]{hyperref}
\usepackage{longtable}


%\usepackage{float}
\usepackage{graphicx,subfig}
% \usepackage{placeins}
\setlength\headheight{26pt}

\fancypagestyle{plain}{\fancyhf{}\fancyhead[R]{\includegraphics[width=6.0in,keepaspectratio=true]{sfwmd_bar8half_wordorexcel.png}}}

\author{Joseph Stachelek}
\title{dbhydroR: An R package to access the DBHYDRO Environmental Database}

%\VignetteIndexEntry{An R package to access the DBHYDRO Environmental Database}

\begin{document}
\SweaveOpts{concordance=TRUE}
\maketitle
%\tableofcontents
 


\section{Introduction}

This document introduces the \texttt{dbhydroR} package and its associated functions. These functions are aimed at improving programmatic workflows that query the DBHYDRO Environmental Database which holds over 35 million hydrologic and water quality records from the Florida Everglades and surrounding areas.  

\section{Package installation}

Computers running the Windows operating system can only install binary package archive files unless they have additional \href{https://cran.r-project.org/bin/windows/Rtools/}{compiler software} installed. The \texttt{dbhydroR} package can be installed by running the following commands from the \texttt{R} console:

<<echo = FALSE>>=
options(width = 50, useFancyQuotes = FALSE, prompt = " ", continue = " ")
@
\vspace{10pt}

\subsection{Stable version from CRAN}
<<eval=FALSE>>=
install.packages("dbhydroR")
@

\subsection{or development version from Github}
<<eval = FALSE>>=
devtools::install_github("SFWMD/dbhydro")
@

\vspace{8pt}
\noindent Once installed, the package can be loaded using the following command:


<<message=FALSE>>=
library(dbhydroR)
@


\section{Composing database queries}
\subsection{Water quality data}

Water quality data can be retrieved using the \texttt{getwq} function which takes four required arguments. The user must specify a station ID, a test name, and a date range. Station IDs can be located on the \href{http://my.sfwmd.gov/WAB/EnvironmentalMonitoring/index.html}{ArcGIS Online Station Map} or the  \href{http://my.sfwmd.gov/KMLEXT/CUSTOMKMLS/DBHydro/DBHydroKML/DBHYDRO_KML.kmz}{Google Earth kmz file}. An abbreviated list of available test names can be found in the \nameref{sec:appendix} to this document while a full listing can be found at the \href{http://my.sfwmd.gov/dbhydroplsql/show_dbkey_info.show_data_type_info}{DBHYDRO metadata page}. Dates must be specified in YYYY-MM-DD format (e.g. 2015-02-26).   The following set of examples retrieve measurements between March 2011 and May 2012. They can be run from the R console by issuing the command:

<<eval=FALSE>>=
example(getwq)
@

\begin{itemize}
\item One variable at one station

<<eval=FALSE>>=
getwq(station_id = "FLAB08", date_min = "2011-03-01", 
      date_max = "2012-05-01", test_name = "CHLOROPHYLLA-SALINE")
@

\item One variable at multiple stations

<<eval=FALSE>>=
getwq(station_id = c("FLAB08","FLAB09"), date_min = "2011-03-01",
      date_max = "2012-05-01", test_name = "CHLOROPHYLLA-SALINE")
@

\item One variable at a wildcard station

<<eval=FALSE>>=
getwq(station_id = c("FLAB0%"), date_min = "2011-03-01", 
      date_max = "2012-05-01", test_name = "CHLOROPHYLLA-SALINE")
@

\item Multiple variables at multiple stations

<<eval=FALSE>>=
getwq(station_id = c("FLAB08","FLAB09"), date_min = "2011-03-01",
      date_max = "2012-05-01", test_name = c("CHLOROPHYLLA-SALINE",
      "SALINITY"))
@

\end{itemize}

\noindent By default, \verb|getwq| returns a \textit{cleaned output}. First, the cleaning function \verb|cleanwq| converts the raw output from native DBHYDRO \textit{long} format (each piece of data on its own row) to \textit{wide} format (each site x variable combination in its own column) using the reshape2 package \citep{reshape2}. Next, the extra columns associated with QA flags, LIMS, and District receiving are removed. Finally, row entries associated with QA field \textit{blanks}, which are used to check on potential sources of contamination, are removed.  Setting the \texttt{raw} flag to \texttt{TRUE} will force \verb|getwq| to retain information on QA field blanks as well as the other QA fields. An example query that retains this information and the original \textit{long} formatting is shown below.

<<eval=FALSE, echo=TRUE>>=
raw_wq <- getwq(station_id = "FLAB08", date_min = "2011-03-01", 
      date_max = "2011-05-01", test_name = "CHLOROPHYLLA-SALINE",
      raw = TRUE)
@

This raw data can then be cleaned using the `cleanwq` function:

<<eval=FALSE, echo=TRUE>>=
cleanwq(raw_wq)
@

\subsection{Hydrologic data}

Hydrologic time series data can be retrieved using the \texttt{gethydro} function. The first task to accomplish prior to running \texttt{gethydro} is to identify one or more dbkeys which correspond to unique site x variable time-series. This can be done before-hand using the \texttt{getdbkey} function, the \href{http://my.sfwmd.gov/WAB/EnvironmentalMonitoring/index.html}{ArGIS Online Station Map} or the \href{http://my.sfwmd.gov/dbhydroplsql/show_dbkey_info.main_menu}{DBHYDRO Browser}. One useful strategy for finding desired dbkeys is to run the \texttt{getdbkey}   function interactively using progressively narrower search terms. For example, suppose we are interested in daily average wind data at Joe Bay but we have no alphanumeric \texttt{dbkey}. Initially we could run \texttt{getdbkey} with the \texttt{detail.level} set to "summary".

<<eval=FALSE>>=
getdbkey(stationid = "JBTS", category = "WEATHER", param = "WNDS",
         detail.level = "summary")
@

\noindent Our search returns two results but only one of them has a daily average (DA) measurement frequency. We can verify the remaining attributes of our likely dbkey by setting the \texttt{freq} parameter to "DA" and the \texttt{detail.level} parameter to "full".

<<eval=FALSE>>=
getdbkey(stationid = "JBTS", category = "WEATHER", param = "WNDS",
         freq = "DA", detail.level = "full")
@

\noindent This exact dbkey can only be returned reliably by specifying all of the \texttt{getdbkey} parameters applicable to the "WEATHER" category.

<<eval=FALSE>>=
getdbkey(stationid = "JBTS", category = "WEATHER", param = "WNDS",
         freq = "DA", stat = "MEAN", recorder = "CR10", agency = "WMD",
         detail.level = "dbkey")
@

\noindent Now that we have our dbkey in hand, we can use is as input to \texttt{gethydro}. In addition to a dbkey, we must specify a date range. Dates must be entered in YYYY-MM-DD format (e.g. 2015-02-26).

<<eval=FALSE>>=
gethydro(dbkey = "15081",
         date_min = "2013-01-01", date_max = "2013-02-02")
@

\noindent Alternatively, we can specify a set of arguments in our call to \texttt{gethydro} that will be passed to \texttt{getdbkey} on-the-fly. Use caution when using this strategy as complex stationid/category/parameter combinations can easily cause errors or return unexpected results. It is good practice to pre-screen your parameter values using \texttt{getdbkey}.

<<eval=FALSE>>=
gethydro(date_min = "2013-01-01", date_max = "2013-02-02",
         stationid = "JBTS", category = "WEATHER", param = "WNDS",
         freq = "DA", stat = "MEAN", recorder = "CR10", agency = "WMD")
@

\noindent The contents of multiple data streams can be returned by specifying multiple dbkeys or entering on-the-fly \texttt{getdbkey} queries that return multiple dbkeys.

<<eval=FALSE>>=
gethydro(dbkey = c("15081", "15069"), date_min = "2013-01-01",
         date_max = "2013-02-02")
@

<<eval=FALSE>>=
gethydro(date_min = "2013-01-01", date_max = "2013-02-02",
         category = "WEATHER", stationid = c("JBTS", "MBTS"),
         param = "WNDS", freq = "DA", stat = "MEAN")
@

\noindent More \texttt{gethydro} examples including queries of other \texttt{category} values ("SW", "GW", and "WQ") can be viewed by issuing the following commands from the \texttt{R} console:

<<eval=FALSE>>=
example(getdbkey)
example(gethydro)
@

\noindent By default, \verb|gethydro| returns a \textit{cleaned output}. First, the cleaning function \verb|cleanhydro| converts the raw output from native DBHYDRO \textit{long} format (each piece of data on its own row) to \textit{wide} format (each site x variable combination in its own column) using the reshape2 package \citep{reshape2}. Next, some extra columns are removed that are associated with measurement location (longitude/latitude), frequency, and QA flags are removed. Setting the \texttt{raw} flag to \texttt{TRUE} will force \verb|gethydro| to retain the original formatting and metadata fields. An example query that retains this information and the original \textit{long} formatting is shown below.

<<eval=FALSE>>=
raw_data <- gethydro(date_min = "2013-01-01", date_max = "2013-02-02",
         stationid = "JBTS", category = "WEATHER", param = "WNDS",
         freq = "DA", stat = "MEAN", recorder = "CR10", agency = "WMD", raw = TRUE)
         
cleanhydro(raw_data)
@

\newpage

\section{\label{sec:appendix}Appendix}
\subsection{Test names}
There are many test names available in DBHYDRO. A subset of these are detailed in the following table.\\

\begin{longtable}{| p{.45\textwidth} | p{.55\textwidth} |} 
\hline
Code\\
\hline
AMMONIA-N\\
CARBON, TOTAL ORGANIC\\
CHLOROPHYLL-A(LC)\\
CHLOROPHYLL-B(LC)\\
CHLOROPHYLLA-SALINE\\
DISSOLVED OXYGEN\\
KJELDAHL NITROGEN,TOTAL\\
NITRATE+NITRITE-N\\
NITRITE-N\\
PHEOPHYTIN-A(LC)\\
PHOSPHATE,ORTHO AS P\\
PHOSPHATE,TOTAL AS P\\
SALINITY\\
SILICA\\
SP CONDUCTIVITY, FIELD\\
TEMP\\
TOTAL NITROGEN\\
TURBIDITY\\
\hline
\end{longtable}
%\end{tabular}

\subsection{Further reading}
See section on URL-based data access in the \href{http://www.sfwmd.gov/portal/page/portal/xrepository/sfwmd_repository_pdf/dbhydrobrowseruserdocumentation.pdf}{DBHYDRO Browser User's Guide}

\medskip
 
 %\setlength{\bibsep}{0pt}
\bibliography{bib}

 
\end{document}